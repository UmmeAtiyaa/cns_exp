def create_playfair_matrix(key):
    """Creates a 5x5 matrix for the Playfair cipher from the provided key."""
    matrix = []
    used_chars = set()
    key = key.upper().replace("J", "I")  # Combine I and J

    # Add unique characters from the key to the matrix
    for char in key:
        if char not in used_chars and char.isalpha():
            used_chars.add(char)
            matrix.append(char)

    # Add remaining characters of the alphabet
    for char in range(ord('A'), ord('Z') + 1):
        char = chr(char)
        if char not in used_chars and char != 'J':  # Exclude J
            matrix.append(char)

    return [matrix[i:i + 5] for i in range(0, len(matrix), 5)]  # Create a 5x5 matrix


def find_position(char, matrix):
    """Finds the row and column of a character in the matrix."""
    for row in range(5):
        for col in range(5):
            if matrix[row][col] == char:
                return row, col
    return None


def prepare_plaintext(plaintext):
    """Prepares the plaintext for encryption by removing spaces and creating digraphs."""
    plaintext = plaintext.upper().replace("J", "I").replace(" ", "")
    prepared = []
    i = 0

    while i < len(plaintext):
        char1 = plaintext[i]
        if i + 1 < len(plaintext):
            char2 = plaintext[i + 1]
            if char1 == char2:  # If both characters are the same
                prepared.append(char1 + 'X')  # Insert 'X' in between
                i += 1
            else:
                prepared.append(char1 + char2)  # Create digraph
                i += 2
        else:
            prepared.append(char1 + 'X')  # If there's a single character left
            i += 1

    return prepared


def playfair_encrypt(plaintext, key):
    """Encrypts the plaintext using the Playfair cipher with the given key."""
    matrix = create_playfair_matrix(key)
    digraphs = prepare_plaintext(plaintext)
    ciphertext = ""

    for digraph in digraphs:
        row1, col1 = find_position(digraph[0], matrix)
        row2, col2 = find_position(digraph[1], matrix)

        # Same row: shift right
        if row1 == row2:
            ciphertext += matrix[row1][(col1 + 1) % 5]
            ciphertext += matrix[row2][(col2 + 1) % 5]
        # Same column: shift down
        elif col1 == col2:
            ciphertext += matrix[(row1 + 1) % 5][col1]
            ciphertext += matrix[(row2 + 1) % 5][col2]
        # Rectangle: swap columns
        else:
            ciphertext += matrix[row1][col2]
            ciphertext += matrix[row2][col1]

    return ciphertext


# Example usage
plaintext = input("Enter the plaintext: ")
key = input("Enter the key: ")

# Encrypt the plaintext using Playfair Cipher
encrypted_text = playfair_encrypt(plaintext, key)
print("Encrypted text:", encrypted_text)
