def multiplicative_cipher(text, key):
    result = ""
    
    # Ensure key is coprime with 26
    if gcd(key, 26) != 1:
        return "Key is not valid. It must be coprime with 26."
    
    # Traverse the text
    for i in range(len(text)):
        char = text[i]

        # Encrypt uppercase characters
        if char.isupper():
            result += chr(((ord(char) - 65) * key % 26) + 65)
        # Encrypt lowercase characters
        elif char.islower():
            result += chr(((ord(char) - 97) * key % 26) + 97)
        else:
            result += char  # Non-alphabet characters remain the same

    return result

def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

# Function to decrypt the text
def multiplicative_decrypt(cipher_text, key):
    # Find modular inverse of the key (key * inverse_key â‰¡ 1 mod 26)
    inverse_key = mod_inverse(key, 26)
    
    if inverse_key is None:
        return "No modular inverse exists, decryption not possible."
    
    result = ""
    for i in range(len(cipher_text)):
        char = cipher_text[i]

        # Decrypt uppercase characters
        if char.isupper():
            result += chr(((ord(char) - 65) * inverse_key % 26) + 65)
        # Decrypt lowercase characters
        elif char.islower():
            result += chr(((ord(char) - 97) * inverse_key % 26) + 97)
        else:
            result += char  # Non-alphabet characters remain the same

    return result

# Function to find the modular inverse of key under mod 26
def mod_inverse(key, mod):
    for x in range(1, mod):
        if (key * x) % mod == 1:
            return x
    return None

# Example usage
text = input("Enter the text: ")
key = int(input("Enter the key (must be coprime with 26): "))

# Encrypt the text
encrypted_text = multiplicative_cipher(text, key)
print("Encrypted text:", encrypted_text)

# Decrypt the text
decrypted_text = multiplicative_decrypt(encrypted_text, key)
print("Decrypted text:", decrypted_text)
